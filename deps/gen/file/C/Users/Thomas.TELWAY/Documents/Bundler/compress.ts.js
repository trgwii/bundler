import { writeVarnum } from "./deps.ts";
export const compress = async (inPath, output, log = () => { }) => {
    let n = 0;
    const stat = await Deno.stat(inPath);
    if (stat.isSymlink) {
        throw new TypeError("Symlinks not implemented");
    }
    if (stat.isFile) {
        log("[compress] file", inPath, "with length", stat.size);
        n += await writeVarnum(output, 0);
        n += await writeVarnum(output, stat.size);
        const file = await Deno.open(inPath);
        n += await Deno.copy(file, output);
        file.close();
    }
    if (stat.isDirectory) {
        n += await writeVarnum(output, 1);
        const entries = [];
        for await (const ent of Deno.readDir(inPath)) {
            entries.push(ent.name);
        }
        log("[compress] dir with", entries.length, "entries");
        n += await writeVarnum(output, entries.length);
        for await (const name of entries) {
            const nameBytes = new TextEncoder().encode(name);
            n += await writeVarnum(output, nameBytes.byteLength);
            await Deno.writeAll(output, nameBytes);
            n += nameBytes.byteLength;
            n += await compress(`${inPath}/${name}`, output, log);
        }
    }
    return n;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR3hDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQzNCLE1BQWMsRUFDZCxNQUFtQixFQUNuQixNQUFXLEdBQUcsRUFBRSxHQUFFLENBQUMsRUFDRixFQUFFO0lBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDbEIsTUFBTSxJQUFJLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0tBQ2pEO0lBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ2YsR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pELENBQUMsSUFBSSxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxJQUFJLE1BQU0sV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNkO0lBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ3BCLENBQUMsSUFBSSxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQWEsRUFBRSxDQUFDO1FBQzdCLElBQUksS0FBSyxFQUFFLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7UUFDRCxHQUFHLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0RCxDQUFDLElBQUksTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxJQUFJLEtBQUssRUFBRSxNQUFNLElBQUksSUFBSSxPQUFPLEVBQUU7WUFDaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakQsQ0FBQyxJQUFJLE1BQU0sV0FBVyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDckQsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUN2QyxDQUFDLElBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUMxQixDQUFDLElBQUksTUFBTSxRQUFRLENBQUMsR0FBRyxNQUFNLElBQUksSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZEO0tBQ0Y7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQyJ9